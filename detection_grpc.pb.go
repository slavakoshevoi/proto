// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.8.0
// source: detection.proto

package detection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectsDetectorClient is the client API for ObjectsDetector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectsDetectorClient interface {
	Detect(ctx context.Context, opts ...grpc.CallOption) (ObjectsDetector_DetectClient, error)
}

type objectsDetectorClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectsDetectorClient(cc grpc.ClientConnInterface) ObjectsDetectorClient {
	return &objectsDetectorClient{cc}
}

func (c *objectsDetectorClient) Detect(ctx context.Context, opts ...grpc.CallOption) (ObjectsDetector_DetectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectsDetector_ServiceDesc.Streams[0], "/grpc.ObjectsDetector/Detect", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectsDetectorDetectClient{stream}
	return x, nil
}

type ObjectsDetector_DetectClient interface {
	Send(*ImageRequest) error
	CloseAndRecv() (*ResultResponse, error)
	grpc.ClientStream
}

type objectsDetectorDetectClient struct {
	grpc.ClientStream
}

func (x *objectsDetectorDetectClient) Send(m *ImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectsDetectorDetectClient) CloseAndRecv() (*ResultResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResultResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ObjectsDetectorServer is the server API for ObjectsDetector service.
// All implementations must embed UnimplementedObjectsDetectorServer
// for forward compatibility
type ObjectsDetectorServer interface {
	Detect(ObjectsDetector_DetectServer) error
	mustEmbedUnimplementedObjectsDetectorServer()
}

// UnimplementedObjectsDetectorServer must be embedded to have forward compatible implementations.
type UnimplementedObjectsDetectorServer struct {
}

func (UnimplementedObjectsDetectorServer) Detect(ObjectsDetector_DetectServer) error {
	return status.Errorf(codes.Unimplemented, "method Detect not implemented")
}
func (UnimplementedObjectsDetectorServer) mustEmbedUnimplementedObjectsDetectorServer() {}

// UnsafeObjectsDetectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectsDetectorServer will
// result in compilation errors.
type UnsafeObjectsDetectorServer interface {
	mustEmbedUnimplementedObjectsDetectorServer()
}

func RegisterObjectsDetectorServer(s grpc.ServiceRegistrar, srv ObjectsDetectorServer) {
	s.RegisterService(&ObjectsDetector_ServiceDesc, srv)
}

func _ObjectsDetector_Detect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectsDetectorServer).Detect(&objectsDetectorDetectServer{stream})
}

type ObjectsDetector_DetectServer interface {
	SendAndClose(*ResultResponse) error
	Recv() (*ImageRequest, error)
	grpc.ServerStream
}

type objectsDetectorDetectServer struct {
	grpc.ServerStream
}

func (x *objectsDetectorDetectServer) SendAndClose(m *ResultResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectsDetectorDetectServer) Recv() (*ImageRequest, error) {
	m := new(ImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ObjectsDetector_ServiceDesc is the grpc.ServiceDesc for ObjectsDetector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectsDetector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ObjectsDetector",
	HandlerType: (*ObjectsDetectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Detect",
			Handler:       _ObjectsDetector_Detect_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "detection.proto",
}
